name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'   # Запускать на каждый push в любую ветку

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: habit_tracker
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_HOST: postgres
      DB_NAME: habit_tracker
      DB_USER: postgres
      DB_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_PORT: 5432
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: "False"
      CI: true

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h $DB_HOST -p $DB_PORT; do
            echo "Waiting for Postgres..."
            sleep 5
          done

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests
        run: python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to remote server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ~/Habit_Tracker
            git pull origin main
            docker compose down
            docker compose up -d --build
